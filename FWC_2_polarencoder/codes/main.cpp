
#include<Arduino.h>
const unsigned int MAX_MESSAGE_LENGTH = 1024;
#include<malloc.h>
#include<stdlib.h>
#include<string.h>
#include<stdio.h>
int *Q1;
int N=1024;
Q1=(int *)malloc(N*sizeof(int));
Q1[0]=0;
Q1[1]=1;
Q1[2]=2;
Q1[3]=4;
Q1[4]=8;
Q1[5]=16;
Q1[6]=32;
Q1[7]=3;
Q1[8]=5;
Q1[9]=64;
Q1[10]=9;
Q1[11]=6;
Q1[12]=17;
Q1[13]=10;
Q1[14]=18;
Q1[15]=128;
Q1[16]=12;
Q1[17]=33;
Q1[18]=65;
Q1[19]=20;
Q1[20]=256;
Q1[21]=34;
Q1[22]=24;
Q1[23]=36;
Q1[24]=7;
Q1[25]=129;
Q1[26]=66;
Q1[27]=512;
Q1[28]=11;
Q1[29]=40;
Q1[30]=68;
Q1[31]=130;
Q1[32]=19;
Q1[33]=13;
Q1[34]=48;
Q1[35]=14;
Q1[36]=72;
Q1[37]=257;
Q1[38]=21;
Q1[39]=132;
Q1[40]=35;
Q1[41]=258;
Q1[42]=26;
Q1[43]=513;
Q1[44]=80;
Q1[45]=37;
Q1[46]=25;
Q1[47]=22;
Q1[48]=136;
Q1[49]=260;
Q1[50]=264;
Q1[51]=38;
Q1[52]=514;
Q1[53]=96;
Q1[54]=67;
Q1[55]=41;
Q1[56]=144;
Q1[57]=28;
Q1[58]=69;
Q1[59]=42;
Q1[60]=516;
Q1[61]=49;
Q1[62]=74;
Q1[63]=272;
Q1[64]=160;
Q1[65]=520;
Q1[66]=288;
Q1[67]=528;
Q1[68]=192;
Q1[69]=544;
Q1[70]=70;
Q1[71]=44;
Q1[72]=131;
Q1[73]=81;
Q1[74]=50;
Q1[75]=73;
Q1[76]=15;
Q1[77]=320;
Q1[78]=133;
Q1[79]=52;
Q1[80]=23;
Q1[81]=134;
Q1[82]=384;
Q1[83]=76;
Q1[84]=137;
Q1[85]=82;
Q1[86]=56;
Q1[87]=27;
Q1[88]=97;
Q1[89]=39;
Q1[90]=259;
Q1[91]=84;
Q1[92]=138;
Q1[93]=145;
Q1[94]=261;
Q1[95]=29;
Q1[96]=43;
Q1[97]=98;
Q1[98]=515;
Q1[99]=88;
Q1[100]=140;
Q1[101]=30;
Q1[102]=146;
Q1[103]=71;
Q1[104]=262;
Q1[105]=265;
Q1[106]=161;
Q1[107]=576;
Q1[108]=45;
Q1[109]=100;
Q1[110]=640;
Q1[111]=51;
Q1[112]=148;
Q1[113]=46;
Q1[114]=75;
Q1[115]=266;
Q1[116]=273;
Q1[117]=517;
Q1[118]=104;
Q1[119]=162;
Q1[120]=53;
Q1[121]=193;
Q1[122]=152;
Q1[123]=77;
Q1[124]=164;
Q1[125]=768;
Q1[126]=268;
Q1[127]=274;
Q1[128]=518;
Q1[129]=54;
Q1[130]=83;
Q1[131]=57;
Q1[132]=521;
Q1[133]=112;
Q1[134]=135;
Q1[135]=78;
Q1[136]=289;
Q1[137]=194;
Q1[138]=85;
Q1[139]=276;
Q1[140]=522;
Q1[141]=58;
Q1[142]=168;
Q1[143]=139;
Q1[144]=99;
Q1[145]=86;
Q1[146]=60;
Q1[147]=280;
Q1[148]=89;
Q1[149]=290;
Q1[150]=529;
Q1[151]=524;
Q1[152]=196;
Q1[153]=141;
Q1[154]=101;
Q1[155]=147;
Q1[156]=176;
Q1[157]=142;
Q1[158]=530;
Q1[159]=321;
Q1[160]=31;
Q1[161]=200;
Q1[162]=90;
Q1[163]=545;
Q1[164]=292;
Q1[165]=322;
Q1[166]=532;
Q1[167]=263;
Q1[168]=149;
Q1[169]=102;
Q1[170]=105;
Q1[171]=304;
Q1[172]=296;
Q1[173]=163;
Q1[174]=92;
Q1[175]=47;
Q1[176]=267;
Q1[177]=385;
Q1[178]=546;
Q1[179]=324;
Q1[180]=208;
Q1[181]=386;
Q1[182]=150;
Q1[183]=153;
Q1[184]=165;
Q1[185]=106;
Q1[186]=55;
Q1[187]=328;
Q1[188]=536;
Q1[189]=577;
Q1[190]=548;
Q1[191]=113;
Q1[192]=154;
Q1[193]=79;
Q1[194]=269;
Q1[195]=108;
Q1[196]=578;
Q1[197]=224;
Q1[198]=166;
Q1[199]=519;
Q1[200]=552;
Q1[201]=195;
Q1[202]=270;
Q1[203]=641;
Q1[204]=523;
Q1[205]=275;
Q1[206]=580;
Q1[207]=291;
Q1[208]=59;
Q1[209]=169;
Q1[210]=560;
Q1[211]=114;
Q1[212]=277;
Q1[213]=156;
Q1[214]=87;
Q1[215]=197;
Q1[216]=116;
Q1[217]=170;
Q1[218]=61;
Q1[219]=531;
Q1[220]=525;
Q1[221]=642;
Q1[222]=281;
Q1[223]=278;
Q1[224]=526;
Q1[225]=177;
Q1[226]=293;
Q1[227]=388;
Q1[228]=91;
Q1[229]=584;
Q1[230]=769;
Q1[231]=198;
Q1[232]=172;
Q1[233]=120;
Q1[234]=201;
Q1[235]=336;
Q1[236]=62;
Q1[237]=282;
Q1[238]=143;
Q1[239]=103;
Q1[240]=178;
Q1[241]=294;
Q1[242]=93;
Q1[243]=644;
Q1[244]=202;
Q1[245]=592;
Q1[246]=323;
Q1[247]=392;
Q1[248]=297;
Q1[249]=770;
Q1[250]=107;
Q1[251]=180;
Q1[252]=151;
Q1[253]=209;
Q1[254]=284;
Q1[255]=648;
Q1[256]=94;
Q1[257]=204;
Q1[258]=298;
Q1[259]=400;
Q1[260]=608;
Q1[261]=352;
Q1[262]=325;
Q1[263]=533;
Q1[264]=155;
Q1[265]=210;
Q1[266]=305;
Q1[267]=547;
Q1[268]=300;
Q1[269]=109;
Q1[270]=184;
Q1[271]=534;
Q1[272]=537;
Q1[273]=115;
Q1[274]=167;
Q1[275]=225;
Q1[276]=326;
Q1[277]=306;
Q1[278]=772;
Q1[279]=157;
Q1[280]=656;
Q1[281]=329;
Q1[282]=110;
Q1[283]=117;
Q1[284]=212;
Q1[285]=171;
Q1[286]=776;
Q1[287]=330;
Q1[288]=226;
Q1[289]=549;
Q1[290]=538;
Q1[291]=387;
Q1[292]=308;
Q1[293]=216;
Q1[294]=416;
Q1[295]=271;
Q1[296]=279;
Q1[297]=158;
Q1[298]=337;
Q1[299]=550;
Q1[300]=672;
Q1[301]=118;
Q1[302]=332;
Q1[303]=579;
Q1[304]=540;
Q1[305]=389;
Q1[306]=173;
Q1[307]=121;
Q1[308]=553;
Q1[309]=199;
Q1[310]=784;
Q1[311]=179;
Q1[312]=228;
Q1[313]=338;
Q1[314]=312;
Q1[315]=704;
Q1[316]=390;
Q1[317]=174;
Q1[318]=554;
Q1[319]=581;
Q1[320]=393;
Q1[321]=283;
Q1[322]=122;
Q1[323]=448;
Q1[324]=353;
Q1[325]=561;
Q1[326]=203;
Q1[327]=63;
Q1[328]=340;
Q1[329]=394;
Q1[330]=527;
Q1[331]=582;
Q1[332]=556;
Q1[333]=181;
Q1[334]=295;
Q1[335]=285;
Q1[336]=232;
Q1[337]=124;
Q1[338]=205;
Q1[339]=182;
Q1[340]=643;
Q1[341]=562;
Q1[342]=286;
Q1[343]=585;
Q1[344]=299;
Q1[345]=354;
Q1[346]=211;
Q1[347]=401;
Q1[348]=185;
Q1[349]=396;
Q1[350]=344;
Q1[351]=586;
Q1[352]=645;
Q1[353]=593;
Q1[354]=535;
Q1[355]=240;
Q1[356]=206;
Q1[357]=95;
Q1[358]=327;
Q1[359]=564;
Q1[360]=800;
Q1[361]=402;
Q1[362]=356;
Q1[363]=307;
Q1[364]=301;
Q1[365]=417;
Q1[366]=213;
Q1[367]=568;
Q1[368]=832;
Q1[369]=588;
Q1[370]=186;
Q1[371]=646;
Q1[372]=404;
Q1[373]=227;
Q1[374]=896;
Q1[375]=594;
Q1[376]=418;
Q1[377]=302;
Q1[378]=649;
Q1[379]=771;
Q1[380]=360;
Q1[381]=539;
Q1[382]=111;
Q1[383]=331;
Q1[384]=214;
Q1[385]=309;
Q1[386]=188;
Q1[387]=449;
Q1[388]=217;
Q1[389]=408;
Q1[390]=609;
Q1[391]=596;
Q1[392]=551;
Q1[393]=650;
Q1[394]=229;
Q1[395]=159;
Q1[396]=420;
Q1[397]=310;
Q1[398]=541;
Q1[399]=773;
Q1[400]=610;
Q1[401]=657;
Q1[402]=333;
Q1[403]=119;
Q1[404]=600;
Q1[405]=339;
Q1[406]=218;
Q1[407]=368;
Q1[408]=652;
Q1[409]=230;
Q1[410]=391;
Q1[411]=313;
Q1[412]=450;
Q1[413]=542;
Q1[414]=334;
Q1[415]=233;
Q1[416]=555;
Q1[417]=774;
Q1[418]=175;
Q1[419]=123;
Q1[420]=658;
Q1[421]=612;
Q1[422]=341;
Q1[423]=777;
Q1[424]=220;
Q1[425]=314;
Q1[426]=424;
Q1[427]=395;
Q1[428]=673;
Q1[429]=583;
Q1[430]=355;
Q1[431]=287;
Q1[432]=183;
Q1[433]=234;
Q1[434]=125;
Q1[435]=557;
Q1[436]=660;
Q1[437]=616;
Q1[438]=342;
Q1[439]=316;
Q1[440]=241;
Q1[441]=778;
Q1[442]=563;
Q1[443]=345;
Q1[444]=452;
Q1[445]=397;
Q1[446]=403;
Q1[447]=207;
Q1[448]=674;
Q1[449]=558;
Q1[450]=785;
Q1[451]=432;
Q1[452]=357;
Q1[453]=187;
Q1[454]=236;
Q1[455]=664;
Q1[456]=624;
Q1[457]=587;
Q1[458]=780;
Q1[459]=705;
Q1[460]=126;
Q1[461]=242;
Q1[462]=565;
Q1[463]=398;
Q1[464]=346;
Q1[465]=456;
Q1[466]=358;
Q1[467]=405;
Q1[468]=303;
Q1[469]=569;
Q1[470]=244;
Q1[471]=595;
Q1[472]=189;
Q1[473]=566;
Q1[474]=676;
Q1[475]=361;
Q1[476]=706;
Q1[477]=589;
Q1[478]=215;
Q1[479]=786;
Q1[480]=647;
Q1[481]=348;
Q1[482]=419;
Q1[483]=406;
Q1[484]=464;
Q1[485]=680;
Q1[486]=801;
Q1[487]=362;
Q1[488]=590;
Q1[489]=409;
Q1[490]=570;
Q1[491]=788;
Q1[492]=597;
Q1[493]=572;
Q1[494]=219;
Q1[495]=311;
Q1[496]=708;
Q1[497]=598;
Q1[498]=601;
Q1[499]=651;
Q1[500]=421;
Q1[501]=792;
Q1[502]=802;
Q1[503]=611;
Q1[504]=602;
Q1[505]=410;
Q1[506]=231;
Q1[507]=688;
Q1[508]=653;
Q1[509]=248;
Q1[510]=369;
Q1[511]=190;
Q1[512]=364;
Q1[513]=654;
Q1[514]=659;
Q1[515]=335;
Q1[516]=480;
Q1[517]=315;
Q1[518]=221;
Q1[519]=370;
Q1[520]=613;
Q1[521]=422;
Q1[522]=425;
Q1[523]=451;
Q1[524]=614;
Q1[525]=543;
Q1[526]=235;
Q1[527]=412;
Q1[528]=343;
Q1[529]=372;
Q1[530]=775;
Q1[531]=317;
Q1[532]=222;
Q1[533]=426;
Q1[534]=453;
Q1[535]=237;
Q1[536]=559;
Q1[537]=833;
Q1[538]=804;
Q1[539]=712;
Q1[540]=834;
Q1[541]=661;
Q1[542]=808;
Q1[543]=779;
Q1[544]=617;
Q1[545]=604;
Q1[546]=433;
Q1[547]=720;
Q1[548]=816;
Q1[549]=836;
Q1[550]=347;
Q1[551]=897;
Q1[552]=243;
Q1[553]=662;
Q1[554]=454;
Q1[555]=318;
Q1[556]=675;
Q1[557]=618;
Q1[558]=898;
Q1[559]=781;
Q1[560]=376;
Q1[561]=428;
Q1[562]=665;
Q1[563]=736;
Q1[564]=567;
Q1[565]=840;
Q1[566]=625;
Q1[567]=238;
Q1[568]=359;
Q1[569]=457;
Q1[570]=399;
Q1[571]=787;
Q1[572]=591;
Q1[573]=678;
Q1[574]=434;
Q1[575]=677;
Q1[576]=349;
Q1[577]=245;
Q1[578]=458;
Q1[579]=666;
Q1[580]=620;
Q1[581]=363;
Q1[582]=127;
Q1[583]=191;
Q1[584]=782;
Q1[585]=407;
Q1[586]=436;
Q1[587]=626;
Q1[588]=571;
Q1[589]=465;
Q1[590]=681;
Q1[591]=246;
Q1[592]=707;
Q1[593]=350;
Q1[594]=599;
Q1[595]=668;
Q1[596]=790;
Q1[597]=460;
Q1[598]=249;
Q1[599]=682;
Q1[600]=573;
Q1[601]=411;
Q1[602]=803;
Q1[603]=789;
Q1[604]=709;
Q1[605]=365;
Q1[606]=440;
Q1[607]=628;
Q1[608]=689;
Q1[609]=374;
Q1[610]=423;
Q1[611]=466;
Q1[612]=793;
Q1[613]=250;
Q1[614]=371;
Q1[615]=481;
Q1[616]=574;
Q1[617]=413;
Q1[618]=603;
Q1[619]=366;
Q1[620]=468;
Q1[621]=655;
Q1[622]=900;
Q1[623]=805;
Q1[624]=615;
Q1[625]=684;
Q1[626]=710;
Q1[627]=429;
Q1[628]=794;
Q1[629]=252;
Q1[630]=373;
Q1[631]=605;
Q1[632]=848;
Q1[633]=690;
Q1[634]=713;
Q1[635]=632;
Q1[636]=482;
Q1[637]=806;
Q1[638]=427;
Q1[639]=904;
Q1[640]=414;
Q1[641]=223;
Q1[642]=663;
Q1[643]=692;
Q1[644]=835;
Q1[645]=619;
Q1[646]=472;
Q1[647]=455;
Q1[648]=796;
Q1[649]=809;
Q1[650]=714;
Q1[651]=721;
Q1[652]=837;
Q1[653]=716;
Q1[654]=864;
Q1[655]=810;
Q1[656]=606;
Q1[657]=912;
Q1[658]=722;
Q1[659]=696;
Q1[660]=377;
Q1[661]=435;
Q1[662]=817;
Q1[663]=319;
Q1[664]=621;
Q1[665]=812;
Q1[666]=484;
Q1[667]=430;
Q1[668]=838;
Q1[669]=667;
Q1[670]=488;
Q1[671]=239;
Q1[672]=378;
Q1[673]=459;
Q1[674]=622;
Q1[675]=627;
Q1[676]=437;
Q1[677]=380;
Q1[678]=818;
Q1[679]=461;
Q1[680]=496;
Q1[681]=669;
Q1[682]=679;
Q1[683]=724;
Q1[684]=841;
Q1[685]=629;
Q1[686]=351;
Q1[687]=467;
Q1[688]=438;
Q1[689]=737;
Q1[690]=251;
Q1[691]=462;
Q1[692]=442;
Q1[693]=441;
Q1[694]=469;
Q1[695]=247;
Q1[696]=683;
Q1[697]=842;
Q1[698]=738;
Q1[699]=899;
Q1[700]=670;
Q1[701]=783;
Q1[702]=849;
Q1[703]=820;
Q1[704]=728;
Q1[705]=928;
Q1[706]=791;
Q1[707]=367;
Q1[708]=901;
Q1[709]=630;
Q1[710]=685;
Q1[711]=844;
Q1[712]=633;
Q1[713]=711;
Q1[714]=253;
Q1[715]=691;
Q1[716]=824;
Q1[717]=902;
Q1[718]=686;
Q1[719]=740;
Q1[720]=850;
Q1[721]=375;
Q1[722]=444;
Q1[723]=470;
Q1[724]=483;
Q1[725]=415;
Q1[726]=485;
Q1[727]=905;
Q1[728]=95;
Q1[729]=473;
Q1[730]=634;
Q1[731]=744;
Q1[732]=852;
Q1[733]=960;
Q1[734]=865;
Q1[735]=693;
Q1[736]=797;
Q1[737]=906;
Q1[738]=715;
Q1[739]=807;
Q1[740]=474;
Q1[741]=636;
Q1[742]=694;
Q1[743]=254;
Q1[744]=717;
Q1[745]=575;
Q1[746]=913;
Q1[747]=798;
Q1[748]=811;
Q1[749]=379;
Q1[750]=697;
Q1[751]=431;
Q1[752]=607;
Q1[753]=489;
Q1[754]=866;
Q1[755]=723;
Q1[756]=486;
Q1[757]=908;
Q1[758]=718;
Q1[759]=813;
Q1[760]=476;
Q1[761]=856;
Q1[762]=839;
Q1[763]=725;
Q1[764]=698;
Q1[765]=914;
Q1[766]=752;
Q1[767]=868;
Q1[768]=819;
Q1[769]=814;
Q1[770]=439;
Q1[771]=929;
Q1[772]=490;
Q1[773]=623;
Q1[774]=671;
Q1[775]=739;
Q1[776]=916;
Q1[777]=463;
Q1[778]=843;
Q1[779]=381;
Q1[780]=497;
Q1[781]=930;
Q1[782]=821;
Q1[783]=726;
Q1[784]=961;
Q1[785]=872;
Q1[786]=492;
Q1[787]=631;
Q1[788]=729;
Q1[789]=700;
Q1[790]=443;
Q1[791]=741;
Q1[792]=845;
Q1[793]=920;
Q1[794]=382;
Q1[795]=822;
Q1[796]=851;
Q1[797]=730;
Q1[798]=498;
Q1[799]=880;
Q1[800]=742;
Q1[801]=445;
Q1[802]=471;
Q1[803]=635;
Q1[804]=932;
Q1[805]=687;
Q1[806]=903;
Q1[807]=825;
Q1[808]=500;
Q1[809]=846;
Q1[810]=745;
Q1[811]=826;
Q1[812]=732;
Q1[813]=446;
Q1[814]=962;
Q1[815]=936;
Q1[816]=475;
Q1[817]=853;
Q1[818]=867;
Q1[819]=637;
Q1[820]=907;
Q1[821]=487;
Q1[822]=695;
Q1[823]=746;
Q1[824]=828;
Q1[825]=753;
Q1[826]=854;
Q1[827]=857;
Q1[828]=504;
Q1[829]=799;
Q1[830]=255;
Q1[831]=964;
Q1[832]=909;
Q1[833]=719;
Q1[834]=477;
Q1[835]=915;
Q1[836]=638;
Q1[837]=748;
Q1[838]=944;
Q1[839]=869;
Q1[840]=491;
Q1[841]=699;
Q1[842]=754;
Q1[843]=858;
Q1[844]=478;
Q1[845]=968;
Q1[846]=383;
Q1[847]=910;
Q1[848]=815;
Q1[849]=976;
Q1[850]=870;
Q1[851]=917;
Q1[852]=727;
Q1[853]=493;
Q1[854]=873;
Q1[855]=701;
Q1[856]=931;
Q1[857]=756;
Q1[858]=860;
Q1[859]=499;
Q1[860]=731;
Q1[861]=823;
Q1[862]=922;
Q1[863]=874;
Q1[864]=918;
Q1[865]=502;
Q1[866]=933;
Q1[867]=743;
Q1[868]=760;
Q1[869]=881;
Q1[870]=494;
Q1[871]=702;
Q1[872]=921;
Q1[873]=501;
Q1[874]=876;
Q1[875]=847;
Q1[876]=992;
Q1[877]=447;
Q1[878]=733;
Q1[879]=827;
Q1[880]=934;
Q1[881]=882;
Q1[882]=937;
Q1[883]=963;
Q1[884]=747;
Q1[885]=505;
Q1[886]=855;
Q1[887]=924;
Q1[888]=734;
Q1[889]=829;
Q1[890]=965;
Q1[891]=938;
Q1[892]=884;
Q1[893]=506;
Q1[894]=749;
Q1[895]=945;
Q1[896]=966;
Q1[897]=755;
Q1[898]=859;
Q1[899]=940;
Q1[900]=830;
Q1[901]=911;
Q1[902]=871;
Q1[903]=639;
Q1[904]=888;
Q1[905]=479;
Q1[906]=946;
Q1[907]=750;
Q1[908]=969;
Q1[909]=508;
Q1[910]=861;
Q1[911]=757;
Q1[912]=970;
Q1[913]=919;
Q1[914]=875;
Q1[915]=862;
Q1[916]=758;
Q1[917]=948;
Q1[918]=977;
Q1[919]=923;
Q1[920]=972;
Q1[921]=761;
Q1[922]=877;
Q1[923]=952;
Q1[924]=495;
Q1[925]=703;
Q1[926]=935;
Q1[927]=978;
Q1[928]=883;
Q1[929]=762;
Q1[930]=503;
Q1[931]=925;
Q1[932]=878;
Q1[933]=735;
Q1[934]=993;
Q1[935]=885;
Q1[936]=939;
Q1[937]=994;
Q1[938]=980;
Q1[939]=926;
Q1[940]=764;
Q1[941]=941;
Q1[942]=967;
Q1[943]=886;
Q1[944]=831;
Q1[945]=947;
Q1[946]=507;
Q1[947]=889;
Q1[948]=984;
Q1[949]=751;
Q1[950]=942;
Q1[951]=996;
Q1[952]=971;
Q1[953]=890;
Q1[954]=509;
Q1[955]=949;
Q1[956]=973;
Q1[957]=1000;
Q1[958]=892;
Q1[959]=950;
Q1[960]=863;
Q1[961]=759;
Q1[962]=1008;
Q1[963]=510;
Q1[964]=979;
Q1[965]=953;
Q1[966]=763;
Q1[967]=974;
Q1[968]=954;
Q1[969]=879;
Q1[970]=981;
Q1[971]=982;
Q1[972]=927;
Q1[973]=995;
Q1[974]=765;
Q1[975]=956;
Q1[976]=887;
Q1[977]=985;
Q1[978]=997;
Q1[979]=986;
Q1[980]=943;
Q1[981]=891;
Q1[982]=998;
Q1[983]=766;
Q1[984]=511;
Q1[985]=988;
Q1[986]=1001;
Q1[987]=951;
Q1[988]=1002;
Q1[989]=893;
Q1[990]=975;
Q1[991]=894;
Q1[992]=1009;
Q1[993]=955;
Q1[994]=1004;
Q1[995]=1010;
Q1[996]=957;
Q1[997]=983;
Q1[998]=958;
Q1[999]=987;
Q1[1000]=1012;
Q1[1001]=999;
Q1[1002]=1016;
Q1[1003]=767;
Q1[1004]=989;
Q1[1005]=1003;
Q1[1006]=990;
Q1[1007]=1005;
Q1[1008]=959;
Q1[1009]=1011;
Q1[1010]=1013;
Q1[1011]=895;
Q1[1012]=1006;
Q1[1013]=1014;
Q1[1014]=1017;
Q1[1015]=1018;
Q1[1016]=991;
Q1[1017]=1020;
Q1[1018]=1007;
Q1[1019]=1015;
Q1[1020]=1019;
Q1[1021]=1021;
Q1[1022]=1022;
Q1[1023]=1023;


int i,j;
int K=200;
int n12=10;
int bpsk[1024];
int F[1024];
int ns[2048];
int L[11][1024];
int ucap[11][1024];
int node=0;
int depth=0;
int done=0;
int flag=0;
int npos;
int Ln[1024];
int temp;
int *a1,*b1;
//a1 = (int *)malloc(1024 * sizeof(int));
//b1 = (int *)malloc(1024 * sizeof(int));
int lnode,ldepth,ltemp,cdepth,rnode,ctemp;
int ucapn[1024];
int c1[1024];
int *x;
int *y;
int e[1024];
int ucapl[1024];
int ucapr[1024];
int a11[1024];
int res[1024];
int man[1024];
int decoded[200];



// declarations

int min(int a,int b);
int *f(int *a,int *b,int *c,int temp)
{
int i;
for(i=0;i<temp;i++)
{
	if((a[i]>0) && (b[i]>0))
	{
		c[i]=min(abs(a[i]),abs(b[i]));



	}
	if((a[i]<0) && (b[i]<0))
	{

		c[i]=min(abs(a[i]),abs(b[i]));

	}
	if((a[i]>0) && (b[i]<0))
	{
		c[i]=-1*min(abs(a[i]),abs(b[i]));


	}
	if((a[i]<0) && (b[i]>0))
	{
		c[i]=-1*min(abs(a[i]),abs(b[i]));


	}

}
return c;
}


int *g(int *a,int *b,int *c,int *d,int temp)
{
int i;
for(i=0;i<temp;i++)
{
d[i]=b[i]+(1-2*c[i])*a[i];
}
return d;
}
int min(int a,int b)
{
	if(a>b)
	{
		return b;
	}
	else
	{
		return a;
	}
}


void setup() 
{
for(i=0;i<N-K;i++)
{
	F[i]=Q1[i];
}


for(i=0;i<2*N;i++)
{
	ns[i]=0;
}

for(i=0;i<n12+1;i++)
{
	for(j=0;j<N;j++)
	{
		ucap[i][j]=0;
	}
}
for(i=0;i<n12+1;i++)
{
	for(j=0;j<N;j++)
	{
		L[i][j]=0;
	}
}
 Serial.begin(9600);
}




void loop() 
{


 //Check to see if anything is available in the serial receive buffer
 while (Serial.available() > 0)
 {
   //Create a place to hold the incoming message
   static char encoded[MAX_MESSAGE_LENGTH];
   static unsigned int message_pos = 0;

   //Read the next available byte in the serial receive buffer
   char inByte = Serial.read();

   //Message coming in (check not terminating character) and guard for over message size
   if ( inByte != '\n' && (message_pos < MAX_MESSAGE_LENGTH - 1) )
   {
     //Add the incoming byte to our message
     encoded[message_pos] = inByte;
     message_pos++;
   }
   //Full message received...
   else
   {
     //Add null character to string
     encoded[message_pos] = '\0';

     //Print the message (or do other things)
     Serial.println(" ");
     Serial.print("The encoded signal is : ");
     Serial.println(" ");
     Serial.println(encoded);
Serial.println(" ");




for(i=0;i<N;i++)
{
	bpsk[i]=1-2*encoded[i];

}


for(i=0;i<1;i++)
{
	for(j=0;j<N;j++)
	{
		L[0][j]=bpsk[j];
	}
}
while(done==0)
{
	if(depth==n12)
	{

		for(i=0;i<N-K;i++)
		{
			if(F[i]==node)
			{
				flag=1;
				break;
			}
		}
			if(flag==1)
			{
				ucap[n12][node]=0;
				flag=0;
			}

			else 
			{
				if(L[n12][node]>=0)
				{
					ucap[n12][node]=0;
				}

				else
				{
					ucap[n12][node]=1;
				}
			}
			if(node==N-1)
			{
				done=1;
			}
			else
			{
				node=(int)(node/2);
				depth=depth-1;
			}
	}
	else
	{
		npos=pow(2,depth)-1+node;
			if(ns[npos]==0)
			{
				temp=pow(2,(n12-depth));
				int index4=0;
				for(i=temp*node;i<temp*node+temp;i++)
				{
					Ln[index4]=L[depth][i];
					index4++;
				}

				for(i=0;i<temp/2;i++)
				{
					a1[i]=Ln[i];

				}
				int index15=0;
				for(i=temp/2;i<temp;i++)
				{
					b1[index15]=Ln[i];
					index15++;
				}
				node=node*2;
				depth=depth+1;
				temp=(int)temp/2;
				x=f(a1,b1,c1,temp);
				int index8=0;
				for(i=temp*node;i<temp*node+temp;i++)
				{
					L[depth][i]=x[index8];
					index8++;
				}

				ns[npos]=1;
			}  
			else
			{
				if(ns[npos]==1)
				{
				temp=pow(2,n12-depth);
				int index5=0;
				for(i=temp*node;i<temp*node+temp;i++)
				{
					Ln[index5]=L[depth][i];
					index5++;
				}
				for(i=0;i<temp/2;i++)
				{
					a1[i]=Ln[i];
				}
				int index16=0;
				for(i=temp/2;i<temp;i++)
				{
					b1[index16]=Ln[i];
					index16++;
				}
				lnode=2*node;
				ldepth=depth+1;
				ltemp=temp/2;
				int index6=0;
				for(i=ltemp*lnode;i<ltemp*(lnode+1);i++)
				{
					ucapn[index6]=ucap[ldepth][i];
					index6++;
				}
				y=g(a1,b1,ucapn,e,temp/2);
				node=node*2+1;
				depth=depth+1;
				temp=temp/2;
				int index7=0;
				for(i=temp*node;i<temp*(node+1);i++)
				{
					L[depth][i]=y[index7];
					index7++;
				}


				ns[npos]=2;
				}
				else
				{
					temp=pow(2,n12-depth);
					lnode=2*node;
					rnode=2*node+1;
					cdepth=depth+1;
					ctemp=temp/2;
					int index9=0;
					for(i=ctemp*lnode;i<ctemp*(lnode+1);i++)
					{
						ucapl[index9]=ucap[cdepth][i];
						index9++;
					}
					int index10=0;
					for(i=ctemp*rnode;i<ctemp*(rnode+1);i++)
					{
						ucapr[index10]=ucap[cdepth][i];
						index10++;

					}

					int index11=0;
					for(i=0;i<index10;i++)
					{
						a11[i]=ucapl[i]^ucapr[i];
				
					}
					int index12=0;
					for(i=0;i<index10;i++)
					{
						res[index12]=a11[i];
						index12++;
					}
					int index13=0;
					for(i=0;i<index10;i++)
					{
						res[index12]=ucapr[i];
						index12++;
						index13++;
					}
					int index14=0;
					for(i=temp*node;i<temp*(node+1);i++)
					{
						ucap[depth][i]=res[index14];
						index14++;
					}
					printf("\nucap is : \n");
					node=(int)node/2;
					depth=depth-1;

	
				}
			}
	}
}


for(i=0;i<N;i++)
{
	man[i]=ucap[n12][i];
}
int index20=0;
for(i=N-K;i<N;i++)
{
	decoded[index20]=man[Q1[i]];
	index20++;
}
Serial.print("The decoded signal is : ");
Serial.println(" ");

for(i=0;i<index20;i++)
{
	Serial.print(decoded[i]);
}
Serial.print("\n");

     //Reset for the next message
     message_pos = 0;
   }

 }


free(Q1);
}

